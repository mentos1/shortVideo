#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('zontoshortvideo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
const ffmpeg = require('ffmpeg');
const google_storage = require('../service/google_storage');
const bucketName = 'zonto_video';
const filename = 'videos/out.mp4';

(async () => {

/*    try {
        let video = await (new ffmpeg('videos/ico_large.MOV'));


        //Обрезка видео
        await video
            .setVideoSize('140x?', true, false)
            .setVideoStartTime(2)
            .setVideoDuration(3)
            .save('videos/out.mp4', function (error, file) {
                if (!error)
                    console.log('Video file: ' + file);

            });


    } catch (e) {
        console.log(e.code);
        console.log(e.msg);
    }*/

    //google_storage.upload(bucketName, filename);
    google_storage.getUrl(bucketName, 'out.mp4');
    //google_storage.create();

})();
